import numpy as np
from qiskit import QuantumCircuit, transpile
from qiskit import Aer
from qiskit.visualization import plot_histogram
from qiskit import QuantumRegister, ClassicalRegister, QuantumCircuit
import matplotlib.pyplot as plt

def verificacion(counts):
    """
    Verifica entre las llaves de la funciÃ³n si esta es constante
    (Dict) -> Bool
    """
    if '0000' in counts.keys():
        print("Funcion Constante")
    else:
        print("Funcion Balanceada")

def main():
    print("1. Implementacion de las 4 funciones posibles de {0,1} a {0,1}:")
    print("0,0")
    simulator = Aer.get_backend('qasm_simulator')
    circuit = QuantumCircuit(2, 2)
    circuit.x(1)
    circuit.cx(1, 0)
    circuit.x(1)
    circuit.measure([1, 0], [1, 0])
    compiled_circuit = transpile(circuit, simulator)
    job = simulator.run(compiled_circuit, shots=1000)
    result = job.result()
    counts = result.get_counts(circuit)
    print(circuit)
    plot_histogram(counts)
    plt.show()

    print("0,1")
    simulator = Aer.get_backend('qasm_simulator')
    circuit = QuantumCircuit(2, 2)
    circuit.x(1)
    circuit.x(0)
    circuit.cx(0, 1)
    circuit.x(0)
    circuit.measure([0, 1], [1, 0])
    compiled_circuit = transpile(circuit, simulator)
    job = simulator.run(compiled_circuit, shots=1000)
    result = job.result()
    counts = result.get_counts(circuit)
    print(circuit)
    plot_histogram(counts)
    plt.show()

    print("1,0")
    simulator = Aer.get_backend('qasm_simulator')
    circuit = QuantumCircuit(2, 2)
    circuit.x(1)
    circuit.x(1)
    circuit.cx(0, 1)
    circuit.x(0)
    circuit.measure([0, 1], [1, 0])
    compiled_circuit = transpile(circuit, simulator)
    job = simulator.run(compiled_circuit, shots=1000)
    result = job.result()
    counts = result.get_counts(circuit)
    print(circuit)
    plot_histogram(counts)
    plt.show()

    print("1,1")
    simulator = Aer.get_backend('qasm_simulator')
    circuit = QuantumCircuit(2, 2)
    circuit.x(1)
    circuit.x(0)
    circuit.x(1)
    circuit.cx(1, 0)
    circuit.x(1)
    circuit.measure([0, 1], [1, 0])
    compiled_circuit = transpile(circuit, simulator)
    job = simulator.run(compiled_circuit, shots=1000)
    result = job.result()
    counts = result.get_counts(circuit)
    print(circuit)
    plot_histogram(counts)
    plt.show()

    print("Algoritmo Deutch")
    simulator = Aer.get_backend('qasm_simulator')
    circuit = QuantumCircuit(2, 1)
    circuit.x(0)
    circuit.h(1)
    circuit.h(0)
    circuit.x(1)
    circuit.cx(1, 0)
    circuit.x(1)
    circuit.h(1)
    circuit.measure([1], [0])
    compiled_circuit = transpile(circuit, simulator)
    job = simulator.run(compiled_circuit, shots=1000)
    result = job.result()
    counts = result.get_counts(circuit)
    print(circuit)
    plot_histogram(counts)
    plt.show()

    print("3. Implementacion de 4 funciones con n= 4 para probar el funcionamiento del algoritmo Deustch-Jozsa")
    print()
    print("prueba #1")
    print("0->1,1->0")
    print()
    print("0,0")
    simulator = Aer.get_backend('qasm_simulator')
    circuit = QuantumCircuit(2, 2)
    circuit.cx(1, 0)
    circuit.measure([0, 1], [1, 0])
    compiled_circuit = transpile(circuit, simulator)
    job = simulator.run(compiled_circuit, shots=1000)
    result = job.result()
    counts = result.get_counts(circuit)
    print(circuit)
    plot_histogram(counts)
    plt.show()

    print("0,1")
    simulator = Aer.get_backend('qasm_simulator')
    circuit = QuantumCircuit(2, 2)
    circuit.x(1)
    circuit.cx(0, 1)
    circuit.measure([0, 1], [1, 0])
    compiled_circuit = transpile(circuit, simulator)
    job = simulator.run(compiled_circuit, shots=1000)
    result = job.result()
    counts = result.get_counts(circuit)
    print(circuit)
    plot_histogram(counts)
    plt.show()

    print("1,0")
    simulator = Aer.get_backend('qasm_simulator')
    circuit = QuantumCircuit(2, 2)
    circuit.x(0)
    circuit.cx(0, 1)
    circuit.measure([0, 1], [1, 0])
    compiled_circuit = transpile(circuit, simulator)
    job = simulator.run(compiled_circuit, shots=1000)
    result = job.result()
    counts = result.get_counts(circuit)
    print(circuit)
    plot_histogram(counts)
    plt.show()

    print("1,1")
    simulator = Aer.get_backend('qasm_simulator')
    circuit = QuantumCircuit(2, 2)
    circuit.x(0)
    circuit.x(1)
    circuit.cx(0, 1)
    circuit.measure([0, 1], [1, 0])
    compiled_circuit = transpile(circuit, simulator)
    job = simulator.run(compiled_circuit, shots=1000)
    result = job.result()
    counts = result.get_counts(circuit)
    print(circuit)
    plot_histogram(counts)
    plt.show()

    print("Prueba para el algoritmo Deutsch")
    simulator = Aer.get_backend('qasm_simulator')
    circuit = QuantumCircuit(2, 1)
    circuit.x(1)
    circuit.h(0)
    circuit.h(1)
    circuit.cx(0, 1)
    circuit.h(0)
    circuit.measure([0], [0])
    compiled_circuit = transpile(circuit, simulator)
    job = simulator.run(compiled_circuit, shots=1000)
    result = job.result()
    counts = result.get_counts(circuit)
    print(circuit)
    plot_histogram(counts)
    plt.show()

    print()
    print("prueba #2")
    print("(0->1,1->0)")
    print()
    print("0,0")
    simulator = Aer.get_backend('qasm_simulator')
    circuit = QuantumCircuit(2, 2)
    circuit.x(1)
    circuit.measure([0, 1], [1, 0])
    compiled_circuit = transpile(circuit, simulator)
    job = simulator.run(compiled_circuit, shots=1000)
    result = job.result()
    counts = result.get_counts(circuit)
    print(circuit)
    plot_histogram(counts)
    plt.show()

    print("0,1")
    simulator = Aer.get_backend('qasm_simulator')
    circuit = QuantumCircuit(2, 2)
    circuit.x(1)
    circuit.x(1)
    circuit.measure([0, 1], [1, 0])
    compiled_circuit = transpile(circuit, simulator)
    job = simulator.run(compiled_circuit, shots=1000)
    result = job.result()
    counts = result.get_counts(circuit)
    print(circuit)
    plot_histogram(counts)
    plt.show()

    print("1,0")
    simulator = Aer.get_backend('qasm_simulator')
    circuit = QuantumCircuit(2, 2)
    circuit.x(0)
    circuit.x(1)
    circuit.measure([0, 1], [1, 0])
    compiled_circuit = transpile(circuit, simulator)
    job = simulator.run(compiled_circuit, shots=1000)
    result = job.result()
    counts = result.get_counts(circuit)
    print(circuit)
    plot_histogram(counts)
    plt.show()

    print("1,1")
    simulator = Aer.get_backend('qasm_simulator')
    circuit = QuantumCircuit(2, 2)
    circuit.x(0)
    circuit.x(1)
    circuit.x(1)
    circuit.measure([0, 1], [1, 0])
    compiled_circuit = transpile(circuit, simulator)
    job = simulator.run(compiled_circuit, shots=1000)
    result = job.result()
    counts = result.get_counts(circuit)
    print(circuit)
    plot_histogram(counts)
    plt.show()

    print("Prueba del algoritmo Deutsch")
    simulator = Aer.get_backend('qasm_simulator')
    circuit = QuantumCircuit(2, 1)
    circuit.x(1)
    circuit.h(0)
    circuit.h(1)
    circuit.x(1)
    circuit.h(0)
    circuit.measure([0], [0])
    compiled_circuit = transpile(circuit, simulator)
    job = simulator.run(compiled_circuit, shots=1000)
    result = job.result()
    counts = result.get_counts(circuit)
    print(circuit)
    plot_histogram(counts)
    plt.show()

    print("(0->1,1->0)")
    print("0,0")
    simulator = Aer.get_backend('qasm_simulator')
    circuit = QuantumCircuit(2, 2)
    circuit.measure([0, 1], [1, 0])
    compiled_circuit = transpile(circuit, simulator)
    job = simulator.run(compiled_circuit, shots=1000)
    result = job.result()
    counts = result.get_counts(circuit)
    print(circuit)
    plot_histogram(counts)
    plt.show()

    print("0,1")
    simulator = Aer.get_backend('qasm_simulator')
    circuit = QuantumCircuit(2, 2)
    circuit.x(1)
    circuit.measure([0, 1], [1, 0])
    compiled_circuit = transpile(circuit, simulator)
    job = simulator.run(compiled_circuit, shots=1000)
    result = job.result()
    counts = result.get_counts(circuit)
    print(circuit)
    plot_histogram(counts)
    plt.show()

    print("1,0")
    simulator = Aer.get_backend('qasm_simulator')
    circuit = QuantumCircuit(2, 2)
    circuit.x(0)
    circuit.measure([0, 1], [1, 0])
    compiled_circuit = transpile(circuit, simulator)
    job = simulator.run(compiled_circuit, shots=1000)
    result = job.result()
    counts = result.get_counts(circuit)
    print(circuit)
    plot_histogram(counts)
    plt.show()

    print("1,1")
    simulator = Aer.get_backend('qasm_simulator')
    circuit = QuantumCircuit(2, 2)
    circuit.x(0)
    circuit.x(1)
    circuit.measure([0, 1], [1, 0])
    compiled_circuit = transpile(circuit, simulator)
    job = simulator.run(compiled_circuit, shots=1000)
    result = job.result()
    counts = result.get_counts(circuit)
    print(circuit)
    plot_histogram(counts)
    plt.show()

    print("Prueba Algoritmo Deutsch")
    simulator = Aer.get_backend('qasm_simulator')
    circuit = QuantumCircuit(2, 1)
    circuit.h(0)
    circuit.x(1)
    circuit.h(1)
    circuit.h(0)
    circuit.measure([0], [0])
    compiled_circuit = transpile(circuit, simulator)
    job = simulator.run(compiled_circuit, shots=1000)
    result = job.result()
    counts = result.get_counts(circuit)
    print(circuit)
    plot_histogram(counts)
    plt.show()

    print("Pruebas de los circuitos para el algoritmo Deutsch Jozsa")
    print("prueba #1")
    simulator = Aer.get_backend('qasm_simulator')
    circuit = QuantumCircuit(5, 4)
    circuit.cx(0, 4)
    circuit.measure([0, 1, 2, 3], [3, 2, 1, 0])
    compiled_circuit = transpile(circuit, simulator)
    job = simulator.run(compiled_circuit, shots=1000)
    result = job.result()
    counts = result.get_counts(circuit)
    print(circuit)
    plot_histogram(counts)
    plt.show()

    print("prueba #2")
    simulator = Aer.get_backend('qasm_simulator')
    circuit = QuantumCircuit(5, 4)
    circuit.cx(1, 4)
    circuit.measure([0, 1, 2, 3], [3, 2, 1, 0])
    compiled_circuit = transpile(circuit, simulator)
    job = simulator.run(compiled_circuit, shots=1000)
    result = job.result()
    counts = result.get_counts(circuit)
    print(circuit)
    plot_histogram(counts)
    plt.show()

    print("prueba #3")
    simulator = Aer.get_backend('qasm_simulator')
    circuit = QuantumCircuit(5, 4)
    circuit.cx(2, 4)
    circuit.measure([0, 1, 2, 3], [3, 2, 1, 0])
    compiled_circuit = transpile(circuit, simulator)
    job = simulator.run(compiled_circuit, shots=1000)
    result = job.result()
    counts = result.get_counts(circuit)
    verificacion(counts)
    print(circuit)
    plot_histogram(counts)
    plt.show()

    print("Pruebas para probar el algoritmo Deutsch - Jozsa")
    # 1
    simulator = Aer.get_backend('qasm_simulator')
    circuit = QuantumCircuit(5, 4)
    circuit.x(4)
    for i in range(5):
        circuit.h(i)
    circuit.cx(0,4)
    for i in range(4):
        circuit.h(i)
    circuit.measure([0, 1, 2, 3], [3, 2, 1, 0])
    compiled_circuit = transpile(circuit, simulator)
    job = simulator.run(compiled_circuit, shots=1000)
    result = job.result()
    counts = result.get_counts(circuit)
    verificacion(counts)
    print(circuit)
    plot_histogram(counts)
    plt.show()

    print("prueba #2")
    simulator = Aer.get_backend('qasm_simulator')
    circuit = QuantumCircuit(5, 4)
    circuit.x(4)
    for i in range(5):
        circuit.h(i)
    circuit.cx(1,4)
    for i in range(4):
        circuit.h(i)
    circuit.measure([0, 1, 2, 3], [3, 2, 1, 0])
    compiled_circuit = transpile(circuit, simulator)
    job = simulator.run(compiled_circuit, shots=1000)
    result = job.result()
    counts = result.get_counts(circuit)
    verificacion(counts)
    print(circuit)
    plot_histogram(counts)
    plt.show()
main()
